@page "/House-Owner"
@using HomeRentManagement.Data;
@inject UserService userservice;
@inject IJSRuntime JS;
@if(load==true){
<div class="container mt-5">
        <div class="d-flex justify-content-between">
   <h3>HouseOwner</h3>
        <button class="btn btn-primary" @onclick="showModel">Add Owner</button>
        </div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Password</th>
                    <th>Address</th>
                    <th>Phone</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Users != null && Users.Any())
                {
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            <td>@user.Password</td>
                            <td>@user.Address</td>
                            <td>@user.Phone</td>
                            <td>@user.Status?.Name </td>


                            <td>
                                @if(user.StatusId==3){
                                    
                                    <button disabled class="btn btn-danger btn-sm mr-3" @onclick="() => DeleteOwner(user.UserId)">Delete</button>
                                }
                                else
                                {
                                    <button class="btn btn-danger btn-sm mr-3" @onclick="() => DeleteOwner(user.UserId)">Delete</button>

                                }
                                <button class="btn btn-primary btn-sm m-2" @onclick="()=>UpdateOwnerAsync(user.UserId)">Edit</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">No members found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="modal px-5" tabindex="-1" style="@ModalStyle">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Home Owner</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
               <EditForm Model="@owner" OnValidSubmit="@SaveMember">
                    @if (mailCheck == true)
                    {
                        <div class="alert alert-danger" role="alert">
                            Change the Email
                        </div>

                    }
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="UserName">User Name:</label>
        <InputText id="UserName" class="form-control" @bind-Value="owner.Username" />
        <ValidationMessage For="@(() => owner.Username)" />
    </div>
    <div class="form-group">
        <label for="Password">Password:</label>
        <InputText id="Password" class="form-control" @bind-Value="owner.Password" />
        <ValidationMessage For="@(() => owner.Password)" />
    </div>
    <div class="form-group">
        <label for="Phone">Phone:</label>
        <InputText id="Phone" class="form-control" @bind-Value="owner.Phone" />
        <ValidationMessage For="@(() => owner.Phone)" />
    </div>
    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText id="Email" type="email" class="form-control" @bind-Value="owner.Email" />
        <ValidationMessage For="@(() => owner.Email)" />
    </div>
    <div class="form-group">
        <label for="Address">Address:</label>
        <InputText id="Address" class="form-control" @bind-Value="owner.Address" />
        <ValidationMessage For="@(() => owner.Address)" />
    </div>
    <div class="form-group">
        <label for="Status">Status:</label>
        <InputSelect id="Status" class="form-control" @bind-Value="owner.StatusId">
            @foreach (var status in statusOptions)
            {
                <option value="@status.Id">@status.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => owner.StatusId)" />
    </div>
    <button type="submit" class="btn btn-primary mt-3">Submit</button>
</EditForm>

            </div>

         
        </div>
    </div>
</div>

@if (updateUser != null )
{
    <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Home Owner</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="hideUpdate"></button>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">Update Home Owner</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="hideUpdate"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@updateUser" OnValidSubmit="@UpdateHomeOwner">
                     
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="UserName">User Name:</label>
                            <InputText id="UserName" class="form-control" @bind-Value="updateUser.Username" />
                            <ValidationMessage For="@(() => updateUser.Username)" />
                        </div>
                        <div class="form-group">
                            <label for="Password">Password:</label>
                            <InputText id="Password" class="form-control" @bind-Value="updateUser.Password" />
                            <ValidationMessage For="@(() => updateUser.Password)" />
                        </div>
                        <div class="form-group">
                            <label for="Phone">Phone:</label>
                            <InputText id="Phone" class="form-control" @bind-Value="updateUser.Phone" />
                            <ValidationMessage For="@(() => updateUser.Phone)" />
                        </div>
                        <div class="form-group">
                            <label for="Email">Email:</label>
                            <InputText id="Email" type="email" class="form-control" @bind-Value="updateUser.Email" disabled />
                            <ValidationMessage For="@(() => updateUser.Email)" />
                        </div>
                        <div class="form-group">
                            <label for="Address">Address:</label>
                            <InputText id="Address" class="form-control" @bind-Value="updateUser.Address" />
                            <ValidationMessage For="@(() => updateUser.Address)" />
                        </div>
                        <div class="form-group">
                            <label for="Status">Status:</label>
                            <InputSelect id="Status" class="form-control" @bind-Value="updateUser.StatusId">
                                @foreach (var status in statusOptions)
                                {
                                    <option value="@status.Id">@status.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => updateUser.StatusId)" />
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">Update</button>
                    </EditForm>
                </div>



            </div>
        </div>
    </div>
}












<div class="modal" tabindex="-1" style="@DeleteModalStyle">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="hideDelete"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Content Goes Here -->
                Are you sure you want to proceed?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="hideDelete">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Yes, Proceed</button>
            </div>
        </div>
    </div>
    </div>
}
else
{
   <h2>Loading..</h2>
}
@code {
    public List<User> Users;
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal= false;
    private int userIdToDelete;
    private List<Status> statusOptions = new List<Status>();
    bool mailCheck;
    bool updatedMailCheck;
    public bool load = false;

    protected override async Task OnInitializedAsync()
    {
        Users = await userservice.GetActiveMembersAsync();
        load = true;
    }


    public User owner=new User();
    private User updateUser = new User();

    async Task SaveMember()
    {

        var existigEmail = await userservice.GetEmailCheck(owner.Email);
        if (existigEmail == false)
        {

            showModal = false;
            Users.Add(owner);
            await userservice.AddOwner(owner);

            owner = new User();
            mailCheck = false;
        }
        else{
            mailCheck = true;

        }



    }

    void HideModal()
    {
        showModal = false;
        owner = new User();
    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {
        statusOptions = await userservice.GetStatusOptionsAsync();

        showModal = true;
    }

    async Task UpdateOwnerAsync(int userId)
    {
        // Call the service method with the parsed memberId
        var dbMember = await userservice.GetMemberByIdAsync(userId);

        EditModal = true;
        if (dbMember != null)
        {
            updateUser = new User()
                {
                    UserId = dbMember.UserId,
                    Username = dbMember.Username,
                    Password = dbMember.Password,
                    Email = dbMember.Email,
                    Phone = dbMember.Phone,
                    Address = dbMember.Address,
                    StatusId=dbMember.StatusId
                };

            statusOptions = await userservice.GetStatusOptionsAsync();

            // Additional code to update the user, e.g., save to the database, if necessary
        }
        else
        {
            // Handle the case where the member with the given ID is not found
            // For example, you can log the error, redirect the user to an error page, or display a message
            // This depends on your application's requirements
        }
    }







    protected async Task DeleteOwner(int userId)
    {
        userIdToDelete = userId;
        DeleteModel = true;
    }

    private async Task DeleteConfirmed()
    {
        await userservice.DeleteUserByIdAsync(userIdToDelete);
        Users = await userservice.GetActiveMembersAsync();


        // Reset variables
        userIdToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdateHomeOwner()
    {
            EditModal = false;


            await userservice.updatedateUser(updateUser);
       
    }
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";



}
