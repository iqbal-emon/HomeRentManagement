@page "/StatusDetails"
@using HomeRentManagement.Data;
@inject StatusService statusservice;
@inject UserService userservice;
@using HomeRentManagement.Components.Status;


<div class="container mt-5">
    <div class="d-flex justify-content-between">
        <h3>StatusDetails</h3>
        <button class="btn btn-primary" @onclick="showModel">Add Status</button>
    </div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>ShortForm</th>
              
                    <th>Action</th>


                </tr>
            </thead>
            <tbody>
                @if (statusss != null && statusss.Any())
                {
                    @foreach (var role in statusss)
                    {
                        <tr>
                            <td>@role.Name</td>
                            <td>@role.ShorForm</td>
                        

                            <td>
                             
                                    @* <button class="btn btn-danger btn-sm mr-3" @onclick="() => DeleteRole(role.Id)">Delete</button> *@

                                <button class="btn btn-primary btn-sm m-2" @onclick="()=>UpdateRole(role.Id)">Edit</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">No Status Found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="modal px-5" tabindex="-1" style="@ModalStyle">
    <StatusAddComponent SaveRole="SaveRole" HideModal="HideModal" status="status"  />
</div>

@if (updateStatus != null)
{
    <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
        <StatusUpdateComponent UpdateRoles="UpdateRoles" hideUpdate="hideUpdate" updateStatus="updateStatus" />

    </div>
    }











<div class="modal" tabindex="-1" style="@DeleteModalStyle">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="hideDelete"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Content Goes Here -->
                Are you sure you want to proceed?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="hideDelete">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Yes, Proceed</button>
            </div>
        </div>
    </div>
</div>
@code {
    public List<Status> statusss;
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    private int roleToDelete;
    private List<Status> statusOptions = new List<Status>();
    public bool load = false;  

    protected override async Task OnInitializedAsync()
    {
        statusss = await statusservice.GetStatus();
        load = true;
    }


    public Status status = new Status();
    private Status updateStatus = new Status();

    public async void SaveRole()
    {

        showModal = false;
        statusss.Add(status);
        await statusservice.AddStatus(status);

        status = new Status();


    }

    void HideModal()
    {
        showModal = false;
        status = new Status();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {


        showModal = true;
    }

    async Task UpdateRole(int StatusId)
    {
        // Call the service method with the parsed memberId
        var roleMember = await statusservice.GetStatusById(StatusId);

        EditModal = true;
        if (roleMember != null)
        {
            updateStatus = new Status()
                {
                    Id = roleMember.Id,
                    Name = roleMember.Name,
                    ShorForm = roleMember.ShorForm,

                };

        }
        else
        {

        }
    }







    protected async Task DeleteRole(int roleId)
    {
        roleToDelete = roleId;
        DeleteModel = true;
    }

    private async Task DeleteConfirmed()
    {
        await statusservice.deleteAsync(roleToDelete);
        Console.WriteLine(roleToDelete);
        statusss = await statusservice.GetStatus();


        // Reset variables
        roleToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdateRoles()
    {
        EditModal = false;
        await statusservice.updatedateStatus(updateStatus);

        statusss = await statusservice.GetStatus();

    }
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";



}
