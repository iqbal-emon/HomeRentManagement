@page "/Payment"

@using HomeRentManagement.Data;
@inject RentalService rentservice;
@inject UserService userservice;
@inject IJSRuntime js
@inject UserIdDecrypt useriddecrypt

@if (load == load){
<div class="container mt-5">
    <div class="d-flex justify-content-between">
        <h3>Rental Details</h3>
        <button class="btn btn-primary" @onclick="showModel">Add Rent</button>
    </div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Tenant Name</th>

                    <th>Unit Name</th>
                    <th>Total Paid</th>
                        <th>Rent Date</th>

                        <th>Rent Month</th>


                    <th>Paid Status</th>
                    <th>Action</th>



                </tr>
            </thead>
            <tbody>
                @if (rent != null && rent.Any())
                {
                    @foreach (var re in rent)
                    {
                        <tr>

                            <td>@re.Tenant?.TenantName</td>

                            <td>@re.Tenant?.Unit.unitName</td>

                            <td>@re.totalRent</td>
                                <td>@re.RentDate</td>

                                <td>@re.RentMont</td>

                            @{
                                bool paid = false;
                            }
                            @foreach(var b in bill)
                            {
                                
                                if (b.TenantID==re.TenantID && b.TotalRent <= re.totalRent)
                                {
                                    paid = true;
                                    <td >Paid</td>
                                    break;
                                }
                            }
                            @if (paid == false)
                            {
                                <td>Unpaid</td>
                            }

                            <td>
                                @if (re.StatusId == 3)
                                {

                                    <button disabled class="btn btn-danger btn-sm mr-3">Delete</button>
                                }
                                else
                                {
                                    <button class="btn btn-danger btn-sm mr-3" @onclick="() =>DeleteRent(re.RentID)">Delete</button>

                                }
                                <button class="btn btn-primary btn-sm m-2" @onclick="()=>UpdatedRent(re.RentID)">Edit</button>

                            </td>


                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">No members found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal px-5" tabindex="-1" style="@ModalStyle">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Bill</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveRent">
                    <div class="form-group">
                        <label for="Tenant">Tenant:</label>
                        <select class="form-control" @bind="newRent" required>
                            @foreach (var unit in unitOptions)
                            {
                                <option value="@unit.TenantID">@unit.TenantName</option>
                            }
                        </select>
                    </div>


                    <div class="form-group">
                        <label for="TotalRent"> Total Rent:</label>
                        <input type="number" class="form-control" @bind="rental.totalRent" required />
                    </div>
                        <div class="form-group">
                            <label for="Rent Month"> Rent Month:</label>
                            <input type="text" class="form-control" @bind="rental.RentMont" required />
                        </div>
                    <div class="form-group">
                        <label for="rentdate">Rent Date:</label>
                        <input type="date" class="form-control" @bind="rental.RentDate" required />
                    </div>


                    <button type="submit" class="btn btn-primary mt-3">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>

@if (updateRent != null)
{
    <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Bill</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="hideUpdate"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit="UpdatedRent">
                        <div class="form-group">
                            <label for="Tenant">Tenant:</label>
                            <select class="form-control" @bind="updateRent.TenantID" required>

                                @foreach (var unit in unitOptions)
                                {
                                    <option value="@unit.TenantID">@unit.TenantName</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="TotalRent">Total Rent:</label>
                            <input type="number" class="form-control" @bind="updateRent.totalRent" required />
                        </div>
                            <div class="form-group">
                                <label for="Rent Month"> Rent Month:</label>
                                <input type="text" class="form-control" @bind="updateRent.RentMont" required />
                            </div>
                        <div class="form-group">
                            <label for="rendate">Rent Date:</label>
                            <input type="date" class="form-control" @bind="updateRent.RentDate" required />
                        </div>
                      

                        <button type="submit" class="btn btn-primary mt-3">Update</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}


<div class="modal" tabindex="-1" style="@DeleteModalStyle">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="hideDelete"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Content Goes Here -->
                Are you sure you want to proceed?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="hideDelete">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Yes, Proceed</button>
            </div>
        </div>
    </div>
    </div>

}
else
{
    <h2>Loading..</h2>
}





@code {
    public List<Rental> rent = new List<Rental>();
    int newRent;
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    private int roleToDelete;
    public bool load = false;

    private List<Tenant> unitOptions = new List<Tenant>();
    private List<Status> statusOptions = new List<Status>();
    private List<BillGenerate> bill = new List<BillGenerate>();



    public string userId;
    protected override async Task OnInitializedAsync()
    {
        userId = await useriddecrypt.GetDecryptedUserId();
        rent = await rentservice.GetAllRent(Int32.Parse(userId));
        unitOptions = await rentservice.GetRentOptionsAsync(Int32.Parse(userId));
        bill = await rentservice.GetTotal(Int32.Parse(userId));
        load = true;

    }

    public Rental rental = new Rental();
    private Rental updateRent = new Rental();
    public async void SaveRent()
    {

        showModal = false;
    

        if (newRent == 0)
        {
            newRent = unitOptions[0].TenantID;
        }

      
        await rentservice.AddRental(rental, newRent);

        rent = new List<Rental>();
        rent = await rentservice.GetAllRent(Int32.Parse(userId));


        rental = new Rental();

        StateHasChanged();
    }
    async Task showModel()
    {
        statusOptions = await userservice.GetStatusOptionsAsync();

        showModal = true;
    }
    void HideModal()
    {
        showModal = false;
        rental = new Rental();


    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;
        rental = new Rental();


    }
    int newUnitId;
    async Task UpdatedRent(int rentId)
    {
        // Call the service method with the parsed memberId
        var billMember = await rentservice.GetRentById(rentId);
       

        EditModal = true;
        if (billMember != null)
        {
            updateRent = new Rental()
                {
                    RentID = billMember.RentID,
                    TenantID=billMember.TenantID,
                    totalRent = billMember.totalRent,
                  RentDate=billMember.RentDate,
                  RentMont=billMember.RentMont
                   

                };
            statusOptions = await userservice.GetStatusOptionsAsync();
            unitOptions = await rentservice.GetRentOptionsAsync(Int32.Parse(userId));


            // Additional code to update the user, e.g., save to the database, if necessary
        }
        else
        {
            // Handle the case where the member with the given ID is not found
            // For example, you can log the error, redirect the user to an error page, or display a message
            // This depends on your application's requirements
        }
    }





    protected async Task DeleteRent(int roleId)
    {
        roleToDelete = roleId;
        DeleteModel = true;
    }

    private async Task DeleteConfirmed()
    {
        await rentservice.deleteAsync(roleToDelete);
        rent = await rentservice.GetAllRent(Int32.Parse(userId));





        // Reset variables
        roleToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdatedRent()
    {
        EditModal = false;


        await rentservice.updatedateRent(updateRent, newUnitId);
    }
   
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";

}
