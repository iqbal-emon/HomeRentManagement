@page "/BillGenerate"
@using HomeRentManagement.Data;
@using HomeRentManagement.Components.BililGenerate;
@inject BillGenerateService billservice;
@inject UserService userservice;
@inject IJSRuntime js
@inject UserIdDecrypt useriddecrypt
@inject NavigationManager NavigationManager



    <div class="container mt-5">
        <div class="d-flex justify-content-between">
            <h3>Bill Generate</h3>
            <button class="btn btn-primary" @onclick="showModel">Add Bill</button>
        </div>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Tenant Name</th>
                        <th>Unit Name</th>
                        <th>Month Name</th>
                        <th>Rent</th>
                        <th>Electricity Billl</th>
                        <th>Gas Bill</th>
                        <th>Service Charge</th>
                        <th>Total</th>

                        <th>Action</th>


                    </tr>
                </thead>
                <tbody>
                    @if (Bg != null && Bg.Any())
                    {
                        @foreach (var Bge in Bg)
                        {
                            <tr>

                                <td>@Bge.Tenant?.TenantName</td>
                                <td>@Bge.Tenant?.Unit?.unitName</td>
                                <td>@Bge.MonthName</td>

                                <td>@Bge.Tenant?.Unit?.Rent</td>
                                <td>@Bge.ElectricityBill</td>
                                <td>@Bge.GasBill</td>
                                <td>@Bge.ServiceCharge</td>
                                <td>@Bge.TotalRent</td>

                                <td>
                                    @if (Bge.StatusId == 3)
                                    {

                                        <button disabled class="btn btn-danger btn-sm mr-3">Delete</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-danger btn-sm mr-3" @onclick="() =>DeleteBill(Bge.BillingID)">Delete</button>

                                    }
                                    <button class="btn btn-primary btn-sm m-2" @onclick="()=>UpdateBill(Bge.BillingID,Bge.Tenant.UnitID)">Edit</button>
                                    <button class="btn btn-secondary btn-sm m-2" @onclick="()=>DetailsRent(Bge.BillingID)">Details</button>

                                </td>


                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6">No members found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="modal px-5" tabindex="-1" style="@ModalStyle">
       <BillGenerateAddComponent NewHomeChanged="OnNewHomeChanged"
    HideModal="HideModal" 
    SaveBill="SaveBill" 
    bill="bill"
     unitOptions="unitOptions" />
    </div>

    @if (updateBill != null)
    {
        <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
        <BillGenerateUpdateComponent hideUpdate="hideUpdate"
                                     UpdatedBill="UpdatedBill"
         updateBill="updateBill"
                                    unitId="newUnitId" statusOptions="statusOptions" unitOptions="unitOptions" />


        </div>
    }


<div class="modal" tabindex="-1" style="@DeleteModalStyle">
   <DeleteComponent hideDelete="hideDelete" DeleteConfirmed="DeleteConfirmed" />
</div>







@code {
    public List<BillGenerate> Bg=new List<BillGenerate>();
    int newUnit;
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    private int roleToDelete;
    private List<Tenant>? unitOptions = new List<Tenant>();
    public bool load = false;
    public List<Status> statusOptions = new List<Status>();


    public string userId;
    protected override async Task OnInitializedAsync()
    {
        userId = await useriddecrypt.GetDecryptedUserId();
        Bg = await billservice.GetAllBill(Int32.Parse(userId));
        unitOptions = await billservice.GetBillOptionsAsync(Int32.Parse(userId));
        statusOptions = await userservice.GetStatusOptionsAsync();


    }

    public BillGenerate bill = new BillGenerate();
    private BillGenerate updateBill = new BillGenerate();
    public async void SaveBill()
    {

        showModal = false;


        if (newUnit == 0)
        {
            newUnit = unitOptions[0].UnitID;
        }

        await billservice.AddBill(bill, newUnit);

        Bg = new List<BillGenerate>();
        Bg = await billservice.GetAllBill(Int32.Parse(userId));

        bill = new BillGenerate();

        StateHasChanged();
    }
    async Task showModel()
    {

        showModal = true;
    }
    void HideModal()
    {
        showModal = false;
        bill = new BillGenerate();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;
        bill = new BillGenerate();

    }
    private void OnNewHomeChanged(int newHomeValue)
    {
        newUnit = newHomeValue;
    }

    public int newUnitId;
    async Task UpdateBill(int billId,int unitId)
    {
        // Call the service method with the parsed memberId
        var billMember = await billservice.GetBillById(billId);
        newUnitId = billMember.Tenant.Unit.UnitID;

        EditModal = true;
        if (billMember != null)
        {
            updateBill = new BillGenerate()
                {
                    BillingID = billMember.BillingID,
                    ElectricityBill = billMember.ElectricityBill,
                    GasBill = billMember.GasBill,
                    ServiceCharge = billMember.ServiceCharge,
                    MonthName=billMember.MonthName,


                    StatusId = billMember.StatusId,

                };
            unitOptions = await billservice.GetBillOptionsAsync(Int32.Parse(userId));

            // Additional code to update the user, e.g., save to the database, if necessary
        }
        else
        {
            // Handle the case where the member with the given ID is not found
            // For example, you can log the error, redirect the user to an error page, or display a message
            // This depends on your application's requirements
        }
    }





    protected async Task DeleteBill(int roleId)
    {
        roleToDelete = roleId;
        DeleteModel = true;
    }

    private async Task DeleteConfirmed()
    {
        await billservice.deleteAsync(roleToDelete);
        Bg = await billservice.GetAllBill(Int32.Parse(userId));




        // Reset variables
        roleToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdatedBill()
    {
        EditModal = false;


        await billservice.updatedateBill(updateBill, newUnitId);
    }
    private void DetailsRent(int rentId)
    {
        // Navigate to the desired page
        NavigationManager.NavigateTo($"./BillGenerate/{rentId}");
    }
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";

}
