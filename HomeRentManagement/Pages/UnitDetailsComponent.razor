@page "/Unit"
@using HomeRentManagement.Data;
@inject UnitService unitservice;
@inject UserService userservice;
@inject IJSRuntime js
@inject UserIdDecrypt useriddecrypt
@using HomeRentManagement.Components;
@using HomeRentManagement.Components.Unit;




<div class=" mt-5">
    <div class="d-flex justify-content-between">
        <h3>Unit Details</h3>

        <RadzenButton Text="Add Unit" Click="showModel" />

    </div>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="12" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@units" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedUnit>
        <Columns>
            <RadzenDataGridColumn Property="UnitID" Filterable="false" Title="ID" Width="80px" TextAlign="TextAlign.Center" />

           <RadzenDataGridColumn Property="House.HouseName" Title="House Name" Width="160px" />

            <RadzenDataGridColumn Property="unitName" Title="Unit Name" Width="160px" />
            <RadzenDataGridColumn Property="BedRoom" Title="BedRoom" Width="120px" />
            <RadzenDataGridColumn Property="WashRoom" Title="WashRoom" Width="120px" />
            <RadzenDataGridColumn Property="Rent" Title="Rent" Width="120px" />
            <RadzenDataGridColumn Property="FlolorNu" Title="Floor" Width="120px" />
            <RadzenDataGridColumn Property="Status.Name" Title="Status" Width="160px" />
            <RadzenDataGridColumn Title="Action" Width="300px">
                <Template Context="unit">
                    @if (unit.StatusId == 3)
                    {
                        <RadzenButton Disabled="true" Text="Delete" Icon="delete" Style="margin-right: 10px;" Click="@(args => DeleteUnit(unit.UnitID))" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" />
                    }
                    else
                    {
                        <RadzenButton Text="Delete" Icon="delete" Style="margin-right: 10px;" Click="@(args => DeleteUnit(unit.UnitID))" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" />
                    }
                    <RadzenButton Text="Edit" Icon="edit" Click="@(args => UpdateUnit(unit.UnitID))" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

</div>


<div class="modal px-5" tabindex="-1" style="@ModalStyle">
    <UnitAddComponent NewHomeChanged="OnNewHomeChanged" unit=" unit" statusOptions="statusOptions" allhome="allhome" HideModal="HideModal" SaveUnit="SaveUnit" />
</div>

@if (updateUnit != null)
{
    <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
        <UnitUpdateComponent  updateUnit="updateUnit" statusOptions="statusOptions" allhome="allhome" hideUpdate="hideUpdate" UpdateUnitBtn="UpdateUnitBtn" />

    </div>
    }











 <div class="modal" tabindex="-1" style="@DeleteModalStyle">
   <DeleteComponent hideDelete="hideDelete" DeleteConfirmed="DeleteConfirmed" />
</div>
@code {
    public List<Unit> units;
    int newHome;
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    private int roleToDelete;
    private List<Status> statusOptions = new List<Status>();
    private List<House> allhome = new List<House>();
    int updateHome;
    public string userId;
    public bool load = false;
    IList<Unit> selectedUnit;

    protected override async Task OnInitializedAsync()
    {
        userId = await useriddecrypt.GetDecryptedUserId();
        units = await unitservice.GetUnit(Int32.Parse(userId));
        allhome = await unitservice.getAllHouse(Int32.Parse(userId));
        load = true;
        selectedUnit = new List<Unit>() { units.FirstOrDefault() };

    }


    public Unit unit = new Unit();
    private Unit updateUnit = new Unit();



    public async void SaveUnit()
    {

        showModal = false;
        unit.OwnerId = Int32.Parse(userId);
        Console.WriteLine(newHome);
        if (newHome == 0)
        {
            newHome = allhome[0].HouseID;

        }


        await unitservice.AddUnit(unit,newHome);
        units = await unitservice.GetUnit(Int32.Parse(userId));
        StateHasChanged();
        unit = new Unit();


    }

    void HideModal()
    {
        showModal = false;
        unit = new Unit();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {
        statusOptions = await userservice.GetStatusOptionsAsync();
        showModal = true;
    }
    private void OnNewHomeChanged(int newHomeValue)
    {
        newHome = newHomeValue;
    }

   

    async Task UpdateUnit(int unitId)
    {
        // Call the service method with the parsed memberId
        var roleMember = await unitservice.GetUnitById(unitId);
        updateHome = roleMember.HomeId;
      
        EditModal = true;
        if (roleMember != null)
        {
            updateUnit = new Unit()
                {
                    UnitID = roleMember.UnitID,
                    unitName = roleMember.unitName,
                    WashRoom = roleMember.WashRoom,
                    BedRoom=roleMember.BedRoom,
                    Rent = roleMember.Rent,
                    FlolorNu=roleMember.FlolorNu,
                    HomeId = roleMember.HomeId,
                    StatusId = roleMember.StatusId,

                };
            statusOptions = await userservice.GetStatusOptionsAsync();

            // Additional code to update the user, e.g., save to the database, if necessary
        }
        else
        {
            // Handle the case where the member with the given ID is not found
            // For example, you can log the error, redirect the user to an error page, or display a message
            // This depends on your application's requirements
        }
    }







    protected async Task DeleteUnit(int roleId)
    {
        roleToDelete = roleId;
        DeleteModel = true;
    }

    private async Task DeleteConfirmed()
    {
        await unitservice.deleteAsync(roleToDelete);
        units = await unitservice.GetUnit(Int32.Parse(userId));


        // Reset variables
        roleToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdateUnitBtn()
    {
        EditModal = false;


        await unitservice.updatedateUnit(updateUnit);
    }
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";



}
