@page "/HomeDetails"
@using HomeRentManagement.Components.Home;
@using HomeRentManagement.Components;

@using HomeRentManagement.Data;
@inject HomeService homeservice;
@inject UserService userservice;
@inject IJSRuntime js
@inject UserIdDecrypt useriddecrypt


@if(load==true){


<div class=" mt-5">
    <div class="d-flex justify-content-between">
        <h3>Home Details</h3>
        @* <button class="btn btn-primary" @onclick="showModel">Add House</button> *@
            <RadzenButton Text="Add House"  Click="showModel" />
        </div>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="12" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@houses" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedHoues>
            <Columns>
                <RadzenDataGridColumn Property="HouseID" Filterable="false" Title="ID"   Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="HouseName" Title="Home Name" Width="160px" />
                <RadzenDataGridColumn Property="HouseAddress" Title="Home Details" Width="200px" />
                <RadzenDataGridColumn Property="Status.Name" Title="Status" Width="160px" />
                <RadzenDataGridColumn Property="floorNumber" Title="Floors" Width="100px" />
                <RadzenDataGridColumn Title="Action" Width="300px" Filterable="false">
                    <Template Context="house">
                        @if (house.StatusId == 3)
                        {
                            <RadzenButton Disabled="true" Text="Delete" Icon="delete" Style="margin-right: 10px;" Click="@(args => DeleteHouse(house.HouseID))" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" />
                        }
                        else
                        {
                            <RadzenButton Text="Delete" Icon="delete" Style="margin-right: 10px;" Click="@(args => DeleteHouse(house.HouseID))" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" />
                        }
                        <RadzenButton Text="Edit" Icon="edit" Click="@(args => UpdateHouse(house.HouseID))" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
</div>
<div class="modal px-5" tabindex="-1" style="@ModalStyle">
 <HomeAddComponent house="house" SaveHouse="SaveHouse" HideModal="HideModal" statusOptions="statusOptions" />
</div>

@if (UpdateHouse != null)
{
    <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
  <HomeUpdateComponent updateHouse="updateHouse" statusOptions="statusOptions" UpdateHouseBtn="UpdateHouseBtn" hideUpdate="hideUpdate"/>
    </div>
    }

}
else
{
    <h1>Loading..</h1>
}










<div class="modal" tabindex="-1" style="@DeleteModalStyle">
   <DeleteComponent hideDelete="hideDelete" DeleteConfirmed="DeleteConfirmed" />
</div>
@code {
    public List<House> houses;

    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    private int roleToDelete;
    private List<Status> statusOptions = new List<Status>();

    public string userId;
    IList<House> selectedHoues;
    public bool load = false;
    protected override async Task OnInitializedAsync()
    {
        userId = await useriddecrypt.GetDecryptedUserId();
        houses = await homeservice.GetHouses(Int32.Parse(userId));
        load = true;
        selectedHoues = new List<House>() { houses.FirstOrDefault() };
    }


    public House house = new House();
    private House updateHouse = new House();
    public Floor newFloor = new Floor();
    public Floor updatedFloor = new Floor();


    public async void SaveHouse()
    {

        showModal = false;
        house.OwnerId = Int32.Parse(userId);


       
        await homeservice.AddHouse(house);
        houses = await homeservice.GetHouses(Int32.Parse(userId));

        StateHasChanged();

        house = new House();


    }

    void HideModal()
    {
        showModal = false;
        house = new House();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {
        statusOptions = await userservice.GetStatusOptionsAsync();

        showModal = true;
    }

    async Task UpdateHouse(int roleId)
    {
        // Call the service method with the parsed memberId
        var roleMember = await homeservice.GetRoleById(roleId);

        EditModal = true;
        if (roleMember != null)
        {
            updateHouse = new House()
                {
                    HouseID = roleMember.HouseID,
                    HouseName = roleMember.HouseName,
                    HouseAddress = roleMember.HouseAddress,
                    StatusId = roleMember.StatusId,
                    floorNumber = roleMember.floorNumber

                };
            statusOptions = await userservice.GetStatusOptionsAsync();

            // Additional code to update the user, e.g., save to the database, if necessary
        }
        else
        {
            // Handle the case where the member with the given ID is not found
            // For example, you can log the error, redirect the user to an error page, or display a message
            // This depends on your application's requirements
        }
    }







    protected async Task DeleteHouse(int roleId)
    {
        roleToDelete = roleId;
        DeleteModel = true;
    }

    private async Task DeleteConfirmed()
    {
        await homeservice.deleteAsync(roleToDelete);
        houses = await homeservice.GetHouses(Int32.Parse(userId));


        // Reset variables
        roleToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdateHouseBtn()
    {
        EditModal = false;


        await homeservice.updatedateHouse(updateHouse);
    }
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";



}
